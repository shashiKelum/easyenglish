// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:easyenglish/core/models/base_entity.dart';
import 'package:easyenglish/core/models/blur_image.dart';
import 'package:easyenglish/core/models/book_entity.dart';
import 'package:easyenglish/core/models/book_games_entity.dart';
import 'package:easyenglish/core/models/books_entity.dart';
import 'package:easyenglish/core/models/current_book_entity.dart';
import 'package:easyenglish/core/models/dictionary_entity.dart';
import 'package:easyenglish/core/models/firebase_user.dart';
import 'package:easyenglish/core/models/letters_entity.dart';
import 'package:easyenglish/core/models/login_entity.dart';
import 'package:easyenglish/core/models/profile.dart';
import 'package:easyenglish/core/models/profile_entity.dart';
import 'package:easyenglish/core/models/refresh_token_entity.dart';
import 'package:easyenglish/core/models/song_entity.dart';
import 'package:easyenglish/core/models/songs_entity.dart';
import 'package:easyenglish/core/models/term_entity.dart';
import 'package:easyenglish/core/models/user.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
		final String type = M.toString();
		if(type == (BaseEntity).toString()){
			return BaseEntity.fromJson(json) as M;
		}
		if(type == (BlurImage).toString()){
			return BlurImage.fromJson(json) as M;
		}
		if(type == (BookEntity).toString()){
			return BookEntity.fromJson(json) as M;
		}
		if(type == (BookData).toString()){
			return BookData.fromJson(json) as M;
		}
		if(type == (Book).toString()){
			return Book.fromJson(json) as M;
		}
		if(type == (BookPage).toString()){
			return BookPage.fromJson(json) as M;
		}
		if(type == (Sentence).toString()){
			return Sentence.fromJson(json) as M;
		}
		if(type == (Word).toString()){
			return Word.fromJson(json) as M;
		}
		if(type == (BookGames).toString()){
			return BookGames.fromJson(json) as M;
		}
		if(type == (Game1).toString()){
			return Game1.fromJson(json) as M;
		}
		if(type == (Game1Option).toString()){
			return Game1Option.fromJson(json) as M;
		}
		if(type == (Game2).toString()){
			return Game2.fromJson(json) as M;
		}
		if(type == (Game2Option).toString()){
			return Game2Option.fromJson(json) as M;
		}
		if(type == (Game3).toString()){
			return Game3.fromJson(json) as M;
		}
		if(type == (Game3Option).toString()){
			return Game3Option.fromJson(json) as M;
		}
		if(type == (Game3Word).toString()){
			return Game3Word.fromJson(json) as M;
		}
		if(type == (Game4).toString()){
			return Game4.fromJson(json) as M;
		}
		if(type == (Game4Option).toString()){
			return Game4Option.fromJson(json) as M;
		}
		if(type == (BookGamesEntity).toString()){
			return BookGamesEntity.fromJson(json) as M;
		}
		if(type == (BookGamesData).toString()){
			return BookGamesData.fromJson(json) as M;
		}
		if(type == (BooksEntity).toString()){
			return BooksEntity.fromJson(json) as M;
		}
		if(type == (BooksData).toString()){
			return BooksData.fromJson(json) as M;
		}
		if(type == (CurrentBookEntity).toString()){
			return CurrentBookEntity.fromJson(json) as M;
		}
		if(type == (CurrentBookData).toString()){
			return CurrentBookData.fromJson(json) as M;
		}
		if(type == (DictionaryEntity).toString()){
			return DictionaryEntity.fromJson(json) as M;
		}
		if(type == (DictionaryData).toString()){
			return DictionaryData.fromJson(json) as M;
		}
		if(type == (Dictionary).toString()){
			return Dictionary.fromJson(json) as M;
		}
		if(type == (FirebaseUser).toString()){
			return FirebaseUser.fromJson(json) as M;
		}
		if(type == (LettersEntity).toString()){
			return LettersEntity.fromJson(json) as M;
		}
		if(type == (Letter).toString()){
			return Letter.fromJson(json) as M;
		}
		if(type == (LoginEntity).toString()){
			return LoginEntity.fromJson(json) as M;
		}
		if(type == (LoginData).toString()){
			return LoginData.fromJson(json) as M;
		}
		if(type == (Profile).toString()){
			return Profile.fromJson(json) as M;
		}
		if(type == (ProfileEntity).toString()){
			return ProfileEntity.fromJson(json) as M;
		}
		if(type == (RefreshTokenEntity).toString()){
			return RefreshTokenEntity.fromJson(json) as M;
		}
		if(type == (SongEntity).toString()){
			return SongEntity.fromJson(json) as M;
		}
		if(type == (SongData).toString()){
			return SongData.fromJson(json) as M;
		}
		if(type == (Song).toString()){
			return Song.fromJson(json) as M;
		}
		if(type == (Lyrics).toString()){
			return Lyrics.fromJson(json) as M;
		}
		if(type == (SongsEntity).toString()){
			return SongsEntity.fromJson(json) as M;
		}
		if(type == (SongsData).toString()){
			return SongsData.fromJson(json) as M;
		}
		if(type == (TermEntity).toString()){
			return TermEntity.fromJson(json) as M;
		}
		if(type == (TermData).toString()){
			return TermData.fromJson(json) as M;
		}
		if(type == (Term).toString()){
			return Term.fromJson(json) as M;
		}
		if(type == (AppUser).toString()){
			return AppUser.fromJson(json) as M;
		}
		if(type == (AuthProvider).toString()){
			return AuthProvider.fromJson(json) as M;
		}

		print("$type not found");
	
		return null;
}

  //list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<BaseEntity>[] is M){
			return data.map<BaseEntity>((Map<String, dynamic> e) => BaseEntity.fromJson(e)).toList() as M;
		}
		if(<BlurImage>[] is M){
			return data.map<BlurImage>((Map<String, dynamic> e) => BlurImage.fromJson(e)).toList() as M;
		}
		if(<BookEntity>[] is M){
			return data.map<BookEntity>((Map<String, dynamic> e) => BookEntity.fromJson(e)).toList() as M;
		}
		if(<BookData>[] is M){
			return data.map<BookData>((Map<String, dynamic> e) => BookData.fromJson(e)).toList() as M;
		}
		if(<Book>[] is M){
			return data.map<Book>((Map<String, dynamic> e) => Book.fromJson(e)).toList() as M;
		}
		if(<BookPage>[] is M){
			return data.map<BookPage>((Map<String, dynamic> e) => BookPage.fromJson(e)).toList() as M;
		}
		if(<Sentence>[] is M){
			return data.map<Sentence>((Map<String, dynamic> e) => Sentence.fromJson(e)).toList() as M;
		}
		if(<Word>[] is M){
			return data.map<Word>((Map<String, dynamic> e) => Word.fromJson(e)).toList() as M;
		}
		if(<BookGames>[] is M){
			return data.map<BookGames>((Map<String, dynamic> e) => BookGames.fromJson(e)).toList() as M;
		}
		if(<Game1>[] is M){
			return data.map<Game1>((Map<String, dynamic> e) => Game1.fromJson(e)).toList() as M;
		}
		if(<Game1Option>[] is M){
			return data.map<Game1Option>((Map<String, dynamic> e) => Game1Option.fromJson(e)).toList() as M;
		}
		if(<Game2>[] is M){
			return data.map<Game2>((Map<String, dynamic> e) => Game2.fromJson(e)).toList() as M;
		}
		if(<Game2Option>[] is M){
			return data.map<Game2Option>((Map<String, dynamic> e) => Game2Option.fromJson(e)).toList() as M;
		}
		if(<Game3>[] is M){
			return data.map<Game3>((Map<String, dynamic> e) => Game3.fromJson(e)).toList() as M;
		}
		if(<Game3Option>[] is M){
			return data.map<Game3Option>((Map<String, dynamic> e) => Game3Option.fromJson(e)).toList() as M;
		}
		if(<Game3Word>[] is M){
			return data.map<Game3Word>((Map<String, dynamic> e) => Game3Word.fromJson(e)).toList() as M;
		}
		if(<Game4>[] is M){
			return data.map<Game4>((Map<String, dynamic> e) => Game4.fromJson(e)).toList() as M;
		}
		if(<Game4Option>[] is M){
			return data.map<Game4Option>((Map<String, dynamic> e) => Game4Option.fromJson(e)).toList() as M;
		}
		if(<BookGamesEntity>[] is M){
			return data.map<BookGamesEntity>((Map<String, dynamic> e) => BookGamesEntity.fromJson(e)).toList() as M;
		}
		if(<BookGamesData>[] is M){
			return data.map<BookGamesData>((Map<String, dynamic> e) => BookGamesData.fromJson(e)).toList() as M;
		}
		if(<BooksEntity>[] is M){
			return data.map<BooksEntity>((Map<String, dynamic> e) => BooksEntity.fromJson(e)).toList() as M;
		}
		if(<BooksData>[] is M){
			return data.map<BooksData>((Map<String, dynamic> e) => BooksData.fromJson(e)).toList() as M;
		}
		if(<CurrentBookEntity>[] is M){
			return data.map<CurrentBookEntity>((Map<String, dynamic> e) => CurrentBookEntity.fromJson(e)).toList() as M;
		}
		if(<CurrentBookData>[] is M){
			return data.map<CurrentBookData>((Map<String, dynamic> e) => CurrentBookData.fromJson(e)).toList() as M;
		}
		if(<DictionaryEntity>[] is M){
			return data.map<DictionaryEntity>((Map<String, dynamic> e) => DictionaryEntity.fromJson(e)).toList() as M;
		}
		if(<DictionaryData>[] is M){
			return data.map<DictionaryData>((Map<String, dynamic> e) => DictionaryData.fromJson(e)).toList() as M;
		}
		if(<Dictionary>[] is M){
			return data.map<Dictionary>((Map<String, dynamic> e) => Dictionary.fromJson(e)).toList() as M;
		}
		if(<FirebaseUser>[] is M){
			return data.map<FirebaseUser>((Map<String, dynamic> e) => FirebaseUser.fromJson(e)).toList() as M;
		}
		if(<LettersEntity>[] is M){
			return data.map<LettersEntity>((Map<String, dynamic> e) => LettersEntity.fromJson(e)).toList() as M;
		}
		if(<Letter>[] is M){
			return data.map<Letter>((Map<String, dynamic> e) => Letter.fromJson(e)).toList() as M;
		}
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e)).toList() as M;
		}
		if(<LoginData>[] is M){
			return data.map<LoginData>((Map<String, dynamic> e) => LoginData.fromJson(e)).toList() as M;
		}
		if(<Profile>[] is M){
			return data.map<Profile>((Map<String, dynamic> e) => Profile.fromJson(e)).toList() as M;
		}
		if(<ProfileEntity>[] is M){
			return data.map<ProfileEntity>((Map<String, dynamic> e) => ProfileEntity.fromJson(e)).toList() as M;
		}
		if(<RefreshTokenEntity>[] is M){
			return data.map<RefreshTokenEntity>((Map<String, dynamic> e) => RefreshTokenEntity.fromJson(e)).toList() as M;
		}
		if(<SongEntity>[] is M){
			return data.map<SongEntity>((Map<String, dynamic> e) => SongEntity.fromJson(e)).toList() as M;
		}
		if(<SongData>[] is M){
			return data.map<SongData>((Map<String, dynamic> e) => SongData.fromJson(e)).toList() as M;
		}
		if(<Song>[] is M){
			return data.map<Song>((Map<String, dynamic> e) => Song.fromJson(e)).toList() as M;
		}
		if(<Lyrics>[] is M){
			return data.map<Lyrics>((Map<String, dynamic> e) => Lyrics.fromJson(e)).toList() as M;
		}
		if(<SongsEntity>[] is M){
			return data.map<SongsEntity>((Map<String, dynamic> e) => SongsEntity.fromJson(e)).toList() as M;
		}
		if(<SongsData>[] is M){
			return data.map<SongsData>((Map<String, dynamic> e) => SongsData.fromJson(e)).toList() as M;
		}
		if(<TermEntity>[] is M){
			return data.map<TermEntity>((Map<String, dynamic> e) => TermEntity.fromJson(e)).toList() as M;
		}
		if(<TermData>[] is M){
			return data.map<TermData>((Map<String, dynamic> e) => TermData.fromJson(e)).toList() as M;
		}
		if(<Term>[] is M){
			return data.map<Term>((Map<String, dynamic> e) => Term.fromJson(e)).toList() as M;
		}
		if(<AppUser>[] is M){
			return data.map<AppUser>((Map<String, dynamic> e) => AppUser.fromJson(e)).toList() as M;
		}
		if(<AuthProvider>[] is M){
			return data.map<AuthProvider>((Map<String, dynamic> e) => AuthProvider.fromJson(e)).toList() as M;
		}

		print("${M.toString()} not found");
	
		return null;
}

  static M? fromJsonAsT<M>(dynamic json) {
		if(json == null){
			return null;
		}		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return _fromJsonSingle<M>(json as Map<String, dynamic>);
		}
	}
}